#include "celementprotomng.h"

#include "calgorithmproto.h"

CAlgorithmProtoMng::CAlgorithmProtoMng(QObject *parent) : QObject(parent)
{
    setObjectName(QStringLiteral("CAlgorithmProtoMng"));

	m_selectedAlgorithmProto = 0;
}

CAlgorithmProto* CAlgorithmProtoMng::addProto(const QString &id, const QString &name, const QMetaObject *algorithmMO)
{
    if(m_algorithmProtos.contains(id)) return 0;
    if(!CAlgorithmProto::checkAlgorithmMO(algorithmMO)) return 0;

    CAlgorithmProto *algorithmProto = new CAlgorithmProto(id, name, algorithmMO, this);
    m_algorithmProtos[id] = algorithmProto;

    emit algorithmProtoAdded(algorithmProto);

	return algorithmProto;
}

void CAlgorithmProtoMng::removeProto(const QString &id)
{
	if(!m_algorithmProtos.contains(id)) return;

	CAlgorithmProto *elementProto = m_algorithmProtos.take(id);
	emit algorithmProtoRemoved(elementProto);
	elementProto->deleteLater();
}

void CAlgorithmProtoMng::selectAlgorithmProto(const QString &id)
{
	if(!m_algorithmProtos.contains(id)) return;

	setSelectedAlgorithmProto(m_algorithmProtos[id]);
}

void CAlgorithmProtoMng::setSelectedAlgorithmProto(CAlgorithmProto *algorithmProto)
{
	if(m_selectedAlgorithmProto == algorithmProto) return;
	if(algorithmProto && (!m_algorithmProtos.values().contains(algorithmProto))) return;
	m_selectedAlgorithmProto = algorithmProto;
    emit algorithmProtoSelected(m_selectedAlgorithmProto);
}